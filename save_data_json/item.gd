class_name Item

## ITEM_NAME
var item_name : String
const SAVE_ITEM_NAME := "ITEM_NAME"

## SUB_DATA
var sub_data : Array[SubData]
const SAVE_SUB_DATA := "SUB_DATA"
const SAVE_SUB_DATA_COUNT := "SUB_DATA_COUNT"


func fill_sub_data(inItemName : String, inSubDataAmount : int = 3) -> void:
	## DEBUG_FILL
	item_name = inItemName
	
	sub_data = []
	var sub : SubData
	for count in range(0, inSubDataAmount):
		sub = SubData.new()
		sub.generate_data()
		sub_data.append(sub)


func get_save_dict() -> Dictionary:
	## FETCH_SUB_DATA
	## sub_dicts: a holder to save all dictionaries
	var sub_dicts := {}
	## fetched_sub_dict: the dictionary generated by sub_data
	var fetched_sub_dict := {}
	
	for count in range(0, sub_data.size()):
		## Fetch Dictionary of sub_data
		fetched_sub_dict = sub_data[count].get_save_dict()
		## Save the data with an ID. In this case we add the COUNT to ensure that the IDs are unique
		sub_dicts[_get_sub_count_id(count)] = fetched_sub_dict
	
	## DATA_TO_RETURN
	var returnDict := {
		SAVE_ITEM_NAME: item_name, 				## set the ITEM_NAME
		SAVE_SUB_DATA_COUNT: sub_data.size(), 	## grab the size. This helps when loading everything.
		SAVE_SUB_DATA: sub_dicts
	}
	return returnDict


func read_save_dict(inSaveDict : Dictionary) -> void:
	## FETCH general Data
	item_name = inSaveDict[SAVE_ITEM_NAME]
	
	## FETCH sub_data
	sub_data = []
	## the following line is important! When comparing it to save, you will notice that our sub_dicts are saved in SAVE_SUB_DATA. So let's fetch this dict before going deeper
	var fetched_sub_data : Dictionary = inSaveDict[SAVE_SUB_DATA]
	var sub_data_count : int = inSaveDict[SAVE_SUB_DATA_COUNT]
	var new_data : SubData
	for count in range(0, sub_data_count):
		new_data = SubData.new()
		## do not forget: we are loading another dict, which needs to be processed by our SubData
		new_data.read_save_dict(fetched_sub_data[_get_sub_count_id(count)])
		sub_data.append(new_data)


func _get_sub_count_id(inCount : int) -> String:
	return SAVE_SUB_DATA + str(inCount)


func d_debug() -> String:
	var return_data : String = "%s: %s - %s sub_data.\n" % [SAVE_ITEM_NAME, item_name, sub_data.size()]
	for count in range(0, sub_data.size()):
		return_data += " - " + str(count) + ": " + sub_data[count].d_debug() + "\n"
	return return_data
